{"version":3,"sources":["api/users.ts","api/todos.ts","components/TodoInfo/TodoInfo.tsx","components/TodoList/TodoList.tsx","components/UserInfo/UserInfo.tsx","App.tsx","index.tsx"],"names":["id","name","username","email","title","completed","userId","TodoInfo","userEmail","userName","className","classNames","href","TodoList","todos","users","map","todo","user","find","u","UserInfo","value","String","App","useState","submitTitleError","setSubmitTitleError","submitUserError","setSubmitUserError","todosFromServer","setTodos","titleInput","setTitleInput","selectedUser","setSelectedUser","action","method","onSubmit","event","preventDefault","trim","document","querySelector","Math","max","Number","type","placeholder","onChange","target","usersFromServer","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.05d6051a.chunk.js","sourcesContent":["export default [\n  {\n    id: 1,\n    name: 'Leanne Graham',\n    username: 'Bret',\n    email: 'Sincere@april.biz',\n  },\n  {\n    id: 2,\n    name: 'Ervin Howell',\n    username: 'Antonette',\n    email: 'Shanna@melissa.tv',\n  },\n  {\n    id: 3,\n    name: 'Clementine Bauch',\n    username: 'Samantha',\n    email: 'Nathan@yesenia.net',\n  },\n  {\n    id: 4,\n    name: 'Patricia Lebsack',\n    username: 'Karianne',\n    email: 'Julianne.OConner@kory.org',\n  },\n  {\n    id: 5,\n    name: 'Chelsey Dietrich',\n    username: 'Kamren',\n    email: 'Lucio_Hettinger@annie.ca',\n  },\n  {\n    id: 6,\n    name: 'Mrs. Dennis Schulist',\n    username: 'Leopoldo_Corkery',\n    email: 'Karley_Dach@jasper.info',\n  },\n  {\n    id: 7,\n    name: 'Kurtis Weissnat',\n    username: 'Elwyn.Skiles',\n    email: 'Telly.Hoeger@billy.biz',\n  },\n  {\n    id: 8,\n    name: 'Nicholas Runolfsdottir V',\n    username: 'Maxime_Nienow',\n    email: 'Sherwood@rosamond.me',\n  },\n  {\n    id: 9,\n    name: 'Glenna Reichert',\n    username: 'Delphine',\n    email: 'Chaim_McDermott@dana.io',\n  },\n  {\n    id: 10,\n    name: 'Clementina DuBuque',\n    username: 'Moriah.Stanton',\n    email: 'Rey.Padberg@karina.biz',\n  },\n];\n","export default [\n  {\n    id: 1,\n    title: 'delectus aut autem',\n    completed: true,\n    userId: 1,\n  },\n  {\n    id: 15,\n    title: 'some other todo',\n    completed: false,\n    userId: 1,\n  },\n  {\n    id: 2,\n    title: 'quis ut nam facilis et officia qui',\n    completed: false,\n    userId: 4,\n  },\n];\n","import React from 'react';\nimport classNames from 'classnames';\n\ninterface TodoInfoProps {\n  id: number;\n  title: string;\n  completed: boolean;\n  userId: number | string;\n  userEmail: string | undefined;\n  userName: string | undefined;\n}\n\nconst TodoInfo: React.FC<TodoInfoProps> = ({\n  id,\n  title,\n  completed,\n  userId,\n  userEmail,\n  userName,\n}) => {\n  return (\n    <article\n      key={id}\n      data-id={id}\n      className={classNames('TodoInfo', {\n        'TodoInfo--completed': completed === true,\n      })}\n    >\n      <h2 className=\"TodoInfo__title\">\n        {title}\n      </h2>\n      <a\n        key={userId}\n        className=\"UserInfo\"\n        href={`mailto:${userEmail}`}\n      >\n        {userName}\n      </a>\n    </article>\n  );\n};\n\nexport default TodoInfo;\n","import React from 'react';\nimport TodoInfo from '../TodoInfo/TodoInfo';\n\ninterface Todo {\n  id: number\n  title: string,\n  completed: boolean,\n  userId: number | string,\n}\n\ninterface TodoListProps {\n  todos: Todo[];\n  users: {\n    id: number;\n    name: string;\n    email: string;\n  }[];\n}\n\nconst TodoList: React.FC<TodoListProps> = ({ todos, users }) => {\n  return (\n    <section className=\"TodoList\">\n      {todos.map(todo => {\n        const user = users.find(u => u.id === todo.userId);\n\n        return (\n          <TodoInfo\n            key={todo.id}\n            id={todo.id}\n            title={todo.title}\n            completed={todo.completed}\n            userId={todo.userId}\n            userEmail={user?.email}\n            userName={user?.name}\n          />\n        );\n      })}\n    </section>\n  );\n};\n\nexport default TodoList;\n","import React from 'react';\n\ninterface UserInfoProps {\n  user: {\n    id: number;\n    name: string;\n    email: string;\n  }\n}\n\nconst UserInfo: React.FC<UserInfoProps> = ({ user }) => {\n  return (\n    <option key={user.id} value={String(user.id)}>\n      {user.name}\n    </option>\n  );\n};\n\nexport default UserInfo;\n","import './App.scss';\nimport { useState } from 'react';\nimport usersFromServer from './api/users';\nimport todosFromServer from './api/todos';\nimport TodoList from './components/TodoList/TodoList';\nimport UserInfo from './components/UserInfo/UserInfo';\n\ninterface Todo {\n  id: number\n  title: string,\n  completed: boolean,\n  userId: number | string,\n}\n\nexport const App = () => {\n  const [submitTitleError, setSubmitTitleError] = useState(false);\n  const [submitUserError, setSubmitUserError] = useState(false);\n  const [todos, setTodos] = useState<Todo[]>(todosFromServer);\n  const [titleInput, setTitleInput] = useState('');\n  const [selectedUser, setSelectedUser] = useState('0');\n\n  const addTodo = (event: React.FormEvent) => {\n    event.preventDefault();\n\n    const title = titleInput.trim();\n    const userId = (document\n      .querySelector('[data-cy=\"userSelect\"]') as HTMLSelectElement)?.value;\n\n    if (title && userId !== '0') {\n      setTodos([...todos, {\n        id: Math.max(...todos.map(todo => todo.id), 0) + 1,\n        title,\n        completed: false,\n        userId: Number(userId),\n      }]);\n      setSubmitTitleError(false);\n      setSubmitUserError(false);\n      setTitleInput('');\n      setSelectedUser('0');\n    } else {\n      if (!title) {\n        setSubmitTitleError(true);\n      } else {\n        setSubmitTitleError(false);\n      }\n\n      if (userId === '0') {\n        setSubmitUserError(true);\n      } else {\n        setSubmitUserError(false);\n      }\n    }\n  };\n\n  const handleTitleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setTitleInput(event.target.value);\n    setSubmitTitleError(false);\n  };\n\n  const handleUserChange = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    setSelectedUser(event.target.value);\n    setSubmitUserError(false);\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>Add todo form</h1>\n\n      <form action=\"/api/todos\" method=\"POST\" onSubmit={addTodo}>\n        <div className=\"field\">\n          <div>Title:</div>\n\n          <input\n            type=\"text\"\n            data-cy=\"titleInput\"\n            placeholder=\"Enter a title\"\n            value={titleInput}\n            onChange={handleTitleChange}\n          />\n\n          {submitTitleError === true\n            && (<span className=\"error\">Please enter a title</span>)}\n        </div>\n\n        <div className=\"field\">\n          <div>User:</div>\n\n          <section className=\"UserList\">\n            <select\n              data-cy=\"userSelect\"\n              value={selectedUser}\n              onChange={handleUserChange}\n            >\n              <option value=\"0\">Choose a user</option>\n              {usersFromServer.map(user => (\n                <UserInfo key={user.id} user={user} />\n              ))}\n            </select>\n\n            {submitUserError === true\n              && (<span className=\"error\">Please choose a user</span>)}\n          </section>\n        </div>\n\n        <button\n          type=\"submit\"\n          data-cy=\"submitButton\"\n        >\n          Add\n        </button>\n      </form>\n\n      <TodoList todos={todos} users={usersFromServer} />\n\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}